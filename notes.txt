================= JEE Topics ===================
1. Introduction & Overview - SOLID PRINCIPLES
2. Servlet
3. JSP (EL JSTL E.T.C), JSF, FACELETS
4. Resource Creation & JNDI
5. Context Dependency Injection ///NO use of new Key word
6. Enterprise Java Beans (Ejb) ///NO use of new Key word
7. JPA - Java Persistence APIs
////-----introduce javascript ------
8. Webservices - Restful(JAX-RS), then SOAP(JAX-WS)
9. JMS - RabbitMq
10. Java Security

======================== maven wildfly plugin ==================
mvn clean compile package wildfly:deploy
mvn wildfly:undeploy
mvn clean compile package wildfly:redeploy

============= overview =================
1. Generate Web application
mvn archetype:generate -DgroupId=cohort10.sys.school -DartifactId=Cohort10School -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

2. packaged web application to .war (web archive) -- this is waht is deployable in application server (wildfly)
mvn clean compile package

3. We uploaded the web archive into wildfly through the admin console......

======= Overview of HTTP ========================
-Any application main aim is to work on data(Message), the data message can exchanged two application within the same device
or different devices.
-For different applications to communicate, they must understand each other....setup rules/guidelines of communication.
-Protocol - is format in which data must be in for data transmitted

OSI MODEL
application layer protocols (http [text in format]) -->
presentation layer protocol (ssl [certificate - encrypts/decrypts) -->
Session Layer(group related request/response) -->
Transport Layer protocol(TCP - handshake-connection established by both the client and the server agrees to do communication) -->
Network layer protocol (IP - address of location) -->
Data link (packaging of data for transmission- frames) -->
Physical layer -- Network cables, wifi - radio waves

================= HTTP ======
Hypertext Transfer Protocol - Tim Berners 1990

1. has a text format called html (hypertext markup language)
2. protocol to exchange data/message (http)
3. client (requester, e.g browser through the url) and server (responder e.g web server)

the client(browser...firefox) makes a request(html) to the server(web server...wildfly),
the server(wildfly) receives the request, processes message and responds to the client (html).
client (browser) receives message the displays the message for the user.

How it works
____________

Scenario 1
client(browser)--request-->Server(wildfly - servlet)
client(browser)<--response--Server(wildfly - servlet)

Scenario 2
client(browser)--request-->Server(wildfly - servlet)
Server(wildfly - servlet)--request-->Database //notice the server is now client to the database
Server(wildfly - servlet)<--response--Database
client(browser)<--responds--Server(wildfly - servlet)

Scenario 3
client(browser)--request-->Server(wildfly - servlet)
Server(wildfly - servlet)--request-->Server2 //notice the server is now client to the database
Server(wildfly - servlet)<--response--Server2
client(browser)<--responds--Server(wildfly - servlet)


1. Client - any application/tool/software that request for services from a server on behalf of user. (e.g Browser, whatsapp, outlook)
    -Http client must understand html - we can manipulate html through css and javascript - (css and javascript will simply
        translate to html) to achieve dynamic html...
2. Server - a program that serves a client with a document (html), therefore http server,
    serves http client with http document (html).

BASICS CHARACTERISTICS ON HTTP
1. Simple
2. extensible
3. stateless - requests are not linked, but not sessionless

COMPONENTS OF HTTP
    1. HTTP MESSAGE  --- text in some format
    2. HTTP METHODS -- verbs/nouns on how the message is sent/received - post,get,put,delete,head,options

   GET - get information from the server to the client, get data is sent together with the url, get data is in the url...
   POST - the data is sent differently the with url, the data hidden in the url.
   PUT - updates while post creates
   DELETE - remove or delete
   HEAD - provides metadata/information about request/response
   OPTIONS - *********

   HTTP STATUS
    200 - ok
    404 - not found - that resource not available
    500 - server encountered unrecoverable error

//************************** SERVLET ***********
Servlet is a java program in JVM that translates http

How do you make a class to become a Servlet?
The class must implement directly or indirectly Servlet API (Application Programming Interface)
Servlet APIs is a collection of interfaces(contract/rules) that a class must
    follow(must implement) in order to server Http request

Servlet API are in package call javax.servlet
The interface that must be implement directly or indirectly is javax.servlet.Servlet

Servlet Container (wildfly, apache tomcat, glassfish e.t.c) - web application server that servers servlet....
Servlet Interface Methods:

lifecycle - creation to destruction

1. void init(ServletConfig config) - called by servlet container, to indicate that the servlet is placed into service
    Servlet container (wildfly) is starting up or when the application is deployed...
    It is called once in the lifecycle of a servlet - called once

2. ServletConfig getServletConfig() - Loads servlet configurations set in deployment descriptor (web.xml) - called once

3. void service(ServletRequest req, ServletResponse res) throws ServletException, IOException - called when a request
     is made, serves the request with content. It can be multiple time..., its whenever request and handles the request
     Whenever a request by the client(browser), the servlet container (wildfly) will automatically initialize
     ServletRequest req - with request information, ServletResponse res - response information

4. void destroy() - called by servlet container, to indicate that the servlet is destroyed
        Servlet container (wildfly) is shutting down or when the application is undeployed...
        It is called once in the lifecycle of a servlet

Note:  implement a servlet by extending abstract javax.servlet.GenericServlet, another way

Note: implement a servlet by extending abstract javax.servlet.HttpServlet, another way

===============================Servlet Lifecycle================
1. Servlet Loading - Servlet Container load all servlet, jvm - once
2. Servlet Instance Creation - once
3. init() method is invoked - once
4. service() method is called on request - done severally
5. destroy() method is invoked - once


============= Deployment Descriptor (web.xml) ===============
- is a java web application configuration file that tells to
    the servlet container(wildfly) how the application should be deployed
- web.xml it as xml.
-what does web.xml provide
    1. Servlet Declaration -- Declaring servlet
        *specify the order of servlet initialization
    2. Servlet Mapping -- maps servlet to url etc
    3. Pass Parameters to a servlet

================= HttpServletRequest Object ===============
- This is an object that is initialized automatically by the container whenever a request is made
    to a servlet

================= HttpServletResponse Object ===============
- Assignment work with http servlet.......

========== Events and Listeners =============
Event - an occurrence of something
In servlet life cycle involves events e.g initialization of servlets, binding attributes and parameters,
    creation sessions etc.
Listeners - waiting for event to happen so that they can process something else.
Event and listeners work hand in hand/ work together

Common listeners in servlet:
    1. ServletContextListener - initialization and destruction events of the whole application.
    2. ServletContextAttributeListener - listens to events of addition and removal of attribute in ServletContext
    3. ServletRequestListener
    4. ServletRequestAttributeListener
    5. HttpServletSessionListener
    6. HttpServletSessionBindingListener
    7. HttpServletSessionAttributeListener


=== Filters =========
    - Kind of seive/interceptor on request and response
    - It add, modify or delete from the request reaches the servlet


===== JDBC API ====
    -Collection of interfaces(API) that help java interact with databases
    -Each vendor(mysql,microsoft sql,oracle, postgres) will implement the interface to java to connect
        to that particular vendor database
    -Two parts of jdbc - jdbc API & jdbc Driver

==process of acquiring connecting to database
    1. Register Driver // deprecated..will done automatically
    2. Establish connection
    3. Create statement
    4. Execute queries (adding, updating, or fetching -- ResultSet....)
    5. Close connection

========= Two ways to establish connection ==========
    1. DriverManager
    2. Datasource -- connection pooling

====== Assignment DriverManager vs Datasource ....check explanation and advantage of datasource over Driver Manager
    -Datasource Allows connection pooling...distributed system...you can reuse connections
    -Loose coupling - allowing you to switch between database eaisly
    -Layer of Abstraction, you application of abstracted from connection management, connection pooling etc.

======= JSP =======
    -Java Servers Pages -- html with java code, a file that allows use of java inside HTML
        -SERVELET -- HTML INSIDE JAVA, BUT IN JSP --- JAVA INSIDE HTML
   -JSP eventually become.
   -Jsp file has .jsp extension, you can rename .html file to .jsp and they become jsp

=== JSP life cycle ===
    1. Translated JSP to Servlet by servlet container
    2. Servlet is compiled to bytecode the container
    3. Servlet is loaded into container(jvm)
    4. Servlet instance is created
    5. the init method is ... _jspInit()
    6. the service method is called for request made... _jspService()
    7. on undeploy or shutting down the web container, the destroy method is called _jspDestroy();

    index.jsp ---> Index_jsp.java --> Index_jsp.class --> Index_jsp.jspInit() ---> Index_jsp.jspService();


    Jsp translation to class.... e.g

    public class Index_jsp implements HttpJspPage{

        int age=30; //put here by declaration tag

        public void _jspInit(ServletConfig config){

        }

        public void _jspService(HttpServletRequest request, HttpServletResponse response) throw Exception{
            //scriplet will automatically be inserted here....
            PrintWriter out = resp.getPrintWriter();
        }

        public void _jspDestroy(){

        }

        String showNotes() {

        }

    }

 ============= JSP SCRIPTING TAGS OR ELEMENTS ===========
scripting in jsp start with <% %>
    1. comments <%-- comment --%>
    2. Directive tag gives the direction on doing something which include.
        a. import
        b. include
        c. use taglib

        <%@ import ... %>

    3. Declaration - declare variable, methods etc
        <%! int age=30 %>
    4. Scriptlet <% code %>
    5. Expression <%= %>

===== implicit objects =====
Are objects that instances created automatically and accessible inside jsp pages, at translation stage...

out - JspWriter ---same printerWriter object for HttpServletResponse..
request - HttpServletRequest
response - HttpServletResponse
application - ServletContext
config - ServletConfig
session - HttpSession

===== directives =====
<%@ page ..... %> ///specify the dependencies of the page..import, disable, extend class
<%@ include .... %>
<%@ taglib .... %> // allows specify the tag library to use in tags..JSTL


===== JSP ACTIONS ======
Standard tags that can be used in jsp replace scriplet
html -- tags then ..jsp tags ...jsp standards tags=jsp actions tags

JSP Standard tags begins with jsp

1. jsp:include - include a page..you pass parameter using jsp:param -- will bind to request implicit object
    and you can access the object through request.getParameter(parameterName);
2. jsp:forward - fowards a page..you pass parameter using jsp:param -- will bind to request implicit object
      and you can access the object through request.getParameter(parameterName);
3. jsp:useBean
    jsp:setProperty
    jsp:getProperty
4. jsp:param

======= JSP Expression Language ========
simplifies
    1. Data access from bean
    2. data access from implicit objects

    syntax of EL ${expression}

    Implicit objects in EL
        1. applicationScope ====  application
        2. sessionScope ==== session
        3. requestScope === request
        4. param === access param values

==== JSTL  TAGS =====
JSTL ---- Java Standard Tag Library
Its a library with a collection of tags that you can use in jsp. The aim is to remove scriplets and instead use
tags.

JSTL CORE TAGS

1. JSTL prefix:out tag - eliminates expression tags
2. JSTL prefix:set -- declaring a variable
3. JSTL prefix:forEach
4. JSTL prefix:choose, prefix:when, prefix:otherwise













